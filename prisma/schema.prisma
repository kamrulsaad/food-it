// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String  @id @default(uuid())
  email   String? @unique
  role    Role    @default(CUSTOMER)
  address String?
  clerkId String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Restaurant Restaurant[]
  Order      Order[]

  @@map("users")
}

model City {
  id        String  @id @default(uuid())
  name      String  @unique
  available Boolean @default(false)
  imageUrl  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurants Restaurant[]
  Rider       Rider[]

  @@map("cities")
}

model Category {
  id        String  @id @default(uuid())
  name      String  @unique
  imageUrl  String
  available Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menuItems MenuItem[]

  @@map("categories")
}

model Variant {
  id         String   @id @default(uuid())
  name       String
  price      Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String

  @@map("variants")
}

model Restaurant {
  id           String    @id @default(uuid())
  name         String
  description  String?
  email        String
  phone        String
  address      String
  zipCode      String
  state        String
  logo         String
  coverPhoto   String
  isHomeMade   Boolean   @default(false)
  approved     Boolean   @default(false)
  openingTime  String
  closingTime  String
  workingDays  Weekday[]
  deliveryTime String
  deliveryFee  Int       @default(0)

  cityId  String
  cityRef City   @relation(fields: [cityId], references: [id])
  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [clerkId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menuItems MenuItem[]
  Order     Order[]

  @@map("restaurants")
}

model MenuItem {
  id           String     @id @default(uuid())
  name         String
  description  String?
  price        Int
  imageUrl     String
  available    Boolean    @default(false)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  categoryId   String?
  category     Category?  @relation(fields: [categoryId], references: [id])

  variants Variant[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]

  @@map("menu_items")
}

model OrderItem {
  id         String @id @default(uuid())
  orderId    String
  menuItemId String
  quantity   Int

  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Rider {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  phone       String      @unique
  address     String
  zipCode     String
  state       String
  clerkId     String      @unique
  vehicleType VehicleType
  available   Boolean     @default(false)
  approved    Boolean     @default(false)

  cityId String
  city   City   @relation(fields: [cityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]

  @@map("riders")
}

model Order {
  id           String      @id @default(uuid())
  userId       String
  name         String?
  phone        String?
  restaurantId String
  riderId      String? // nullable until assigned
  status       OrderStatus
  totalAmount  Int
  deliveryFee  Int         @default(0)
  address      String?

  // Status timestamps
  placedAt        DateTime  @default(now())
  acceptedAt      DateTime? // restaurant accepted
  riderAssignedAt DateTime?
  readyAt         DateTime?
  pickedUpAt      DateTime?
  onTheWayAt      DateTime?
  deliveredAt     DateTime?
  cancelledAt     DateTime?

  user       User       @relation(fields: [userId], references: [clerkId])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  rider      Rider?     @relation(fields: [riderId], references: [id])

  OrderItem OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("orders")
}

model Chat {
  id        String    @id @default(cuid())
  orderId   String
  withRole  String // "OWNER" or "RIDER"
  messages  Message[]
  createdAt DateTime  @default(now())

  @@unique([orderId, withRole]) // Ensures unique chat per role per order
}

model Message {
  id         String   @id @default(cuid())
  chatId     String
  chat       Chat     @relation(fields: [chatId], references: [id])
  content    String
  senderId   String
  senderRole String // "CUSTOMER" | "OWNER" | "RIDER"
  createdAt  DateTime @default(now())
}

enum OrderStatus {
  PLACED
  ACCEPTED_BY_RESTAURANT
  RIDER_ASSIGNED
  READY_FOR_PICKUP
  PICKED_UP_BY_RIDER
  ON_THE_WAY
  DELIVERED
  CANCELLED
}

enum Role {
  SUPERADMIN
  ADMIN
  CUSTOMER
  RESTATURANT_OWNER
  RESTATURANT_ADMIN
  RIDER
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum VehicleType {
  BICYCLE
  MOTORCYCLE
}
